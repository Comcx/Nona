

(Module Test ( -- The test file


-- Ploymorphism & Dependent types
(= (: id (-> (: a Set) a a)) (\ (a x) x))
(= (: . (-> (: a Set) (: b Set) (: c Set) (-> b c) (-> a b) (-> a c))) 
    (\ (a b c f g x) (f (g x))))
(= (: weird (-> (: x Int) (if (== x 0) Int Bool) String))
	(\ (x a) "OK"))


-- Boolean functions
(= (: not (-> Bool Bool)) (\ (b) (if b false true)))
(= (: and (-> Bool Bool Bool)) (\ (a b) (if a b false)))
(= (: or  (-> Bool Bool Bool)) (\ (a b) (if a true b)))
(= (: xor (-> Bool Bool Bool))
	(\ (a b) (if (and (or a b) (not (and a b))) true false)))

(= h (= (((: g (-> Int Int)) (\ (x) (+ x x))) ((: y Int) 6)) (g y)))


-- Recursion
(= (: fact (-> Int Int))
   (= (((: f (-> (-> Int Int) (-> Int Int)))
	      (\ (g n) (if (== n 0) 1 (* n (g (- n 1)))))))
	 (fix (-> Int Int) f)))



(= ^ (= ((PT (-> Int Int Int))
         ((: f (-> PT (-> Int Int Int)))
           (\ (f x n) (if (== n 0) 1 (* x (f x (- n 1)))))))
       (fix PT f)))))











